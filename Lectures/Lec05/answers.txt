PLC:

5.1:

chap5.fsx file Line 2-8

Merge.java file


5.7:

in TypedFun.fsx


Line 53: Added ListExpr (tyexpr list * typ)
Line 142: Added expression to check if list typing is correct

Test examples: 
open TypedFun;;
typ (ListExpr ([CstB false; CstI 3; CstB true], TypI)) [];; -> returns failwith "Wrong typing"
typ (ListExpr ([CstI 2; CstI 3; CstI 4], TypI)) [];; -> returns val it : typ = TypL TypI

6.1:

in ParseAndRunHigher.fs

Line 63-90: Added ex10,ex11,ex12,ex13 and a small explanation for ex12 & ex13

6.2: 

in FunPar.fsy:

Added expression for functions

Added token "PIL" to represent a right arrow "->"

Added operator precedence for "PIL"

In FunLex.fsl:

Added keyword "fun" to represen a function

Added token "PIL" to represent a right arrow "->" 

In HigherFun.fs:

Line 33: Added Clos to represent the closure of anonymous functions

Line 69-73: Added a case for Clos to the eval functional

Line 74: Added a case for Fun to evaluate functions


6.3:
in ParseAndRunHigher.fs

Added the examples from the book as ex14 and ex15.
To test the examples please type it in the terminal like run(Parse.fromString("string"));; instead of run ex14

FunLex.fsl: Line 33 -> added keyword fun

FunPar.fsy: Line 43 -> added parsing of fun

6.4:

For the rule trees look at ex6.4.1.PNG and ex6.4.2.png

Regarding polymorphism, it is because in 6.4.1 it can take any x, but in 6.4.2 it is required to be of type int because of the comparison

6.5:

Part 

inferType (fromString "let f x = 1 in f f end");; - type int

inferType (fromString "let f g = g g in f end");; - type error: circularity. 
- The type cannot be infered because g does not have a return type.

inferType (fromString "let f x = let g y = y in g false end in f 42 end");; -type bool

inferType (fromString "let f x = let g y = if true then y else x in g false end in f 42 end");; -type error: bool and int. 
- We cannot do an "if then else statement" that returns a different type in the two branches, therefore this fails.

inferType (fromString "let f x = let g y = if true then y else x in g false end in f true end");; - type bool



Part 2

• bool -> bool
inferType (fromString "let f x = if x then x else false in f end");;

• int -> int
inferType(fromString "let f x = x * 2 in f end");;

• int -> int -> int
inferType(fromString "let f x = let g y = x + y in g end in f end");;

• ’a -> ’b -> ’a

inferType(fromString "let f x = let g y = x in g end in f end");;


• ’a -> ’b -> ’b
inferType (fromString "let f x = let g y = y in g end in f end");;


We were told by a TA not to make the rest of the assignment because of extreme difficulty.

